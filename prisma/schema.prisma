generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  email     String       @unique
  password  String
  verified  Boolean      @default(false)
  type      UserType     @default(user)
  profile   UserProfile?
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt

  verificationCode verificationCode[]
  Session          Session[]
  Event            Event[]
  Booking          Booking[]

  @@index([email])
}

model UserProfile {
  id                 String      @id @default(uuid())
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String      @unique
  name               String?
  phoneNumber        String?
  profession         Profession? // Optional field (Student / Working)
  gender             Gender?
  jobTitle           JobTitle? // Designer / Developer
  place              String? // Optional field (Institute name)
  socialLinks        SocialLink[]
  bio                String? // Optional field
  avatar             String? // Optional field
  createdAt          DateTime    @default(now())
  updatedAt          DateTime?   @updatedAt

  @@index([userId])
}

model SocialLink {
  id        String      @id @default(uuid())
  type      SocialLinkType
  link      String
  isVisible Boolean     @default(false)
  UserProfile UserProfile @relation(fields: [userId], references: [id])
  userId    String
}

enum SocialLinkType {
  LinkedIn
  Twitter
  GitHub
  Website
  Instagram
  Facebook
  Peerlist
}

model verificationCode {
  id        String               @id @default(uuid())
  type      VerificationCodeType
  user      User                 @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime             @default(now())

  @@index([userId])
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Event {
  id              String        @id @default(uuid())
  name            String
  description     String // Maps to why attend section
  poster          String? // URL of the poster image
  type            EventType // Meetup, conference, etc
  category        EventCategory // Design, Development, Both
  startTime       DateTime
  duration        Int // In hours
  location        LocationType // Online, Physical
  completeAddress String // Web URL / Complete address
  hosts           Speaker[]     @relation("EventHost") // Relation to Host model
  speakers        Speaker[]     @relation("EventSpeakers") // Relation to Speaker model
  isPaid          Boolean // Paid/Free
  seats           Int
  ticketPrice     Float[] // Optional if isPaid is false
  accountNumber   String?
  accountName     String?
  IFSCCode        String?
  termsConditions String?
  bookings        Booking[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt
  User            User?         @relation(fields: [userId], references: [id])
  userId          String?
  Speaker         Speaker[]
}

model Speaker {
  id             String      @id @default(uuid())
  name           String
  profession     Profession? // Optional field (Student / Working)
  linkedin       String?
  twitter        String?
  avatar         String?
  type           SpeakerType // Host, Speaker
  event          Event       @relation(fields: [eventId], references: [id])
  eventId        String
  hostedEvents   Event[]     @relation("EventHost")
  speakingEvents Event[]     @relation("EventSpeakers")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?   @updatedAt
}

enum SpeakerType {
  Host
  Speaker
}

model Booking {
  id              String         @id @default(uuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  event           Event          @relation(fields: [eventId], references: [id])
  eventId         String
  qrCode          String
  price           Float
  paymentMethod   PaymentMethod? // UPI, Card, Bank Transfer
  paymentReceipt  String?
  razorpayOrderId String?
  status          BookingStatus // Pending, Approved, Rejected
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt

  @@unique([userId, eventId])
}

enum PaymentMethod {
  UPI
  Card
  BankTransfer
}

enum JobTitle {
  Designer
  Developer
  Founder
}

enum Gender {
  Male
  Female
  Others
}

enum UserType {
  user
  admin
}

enum EventCategory {
  Design
  Development
  Founders
  Both
}

enum LocationType {
  Online
  Physical
}

enum BookingStatus {
  Pending
  Approved
  Rejected
}

enum EventType {
  Meetup
  Conference
  Workshop
  Webinar
  Hackathon
  Bootcamp
  CoWorking
}

enum VerificationCodeType {
  Email_Verification
  Password_Reset
  Mobile_Verification
}

enum Profession {
  Student
  Working
}
